name: CI

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'
          cache: 'gradle'

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x gradlew
        working-directory: backend

      - name: Run backend unit tests
        run: ./gradlew test
        working-directory: backend

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: ml/src/inference/requirements.txt

      - name: Install inference service dependencies
        run: pip install --upgrade pip && pip install -r requirements.txt
        working-directory: ml/src/inference

      - name: Run inference service tests
        run: pytest
        working-directory: ml/src/inference

      - name: Start docker compose stack
        run: docker compose -f infrastructure/docker/docker-compose.yml up -d --build

      - name: Wait for services to become healthy
        run: |
          set -euo pipefail
          compose="docker compose -f infrastructure/docker/docker-compose.yml"
          services=(postgres zookeeper kafka inference)
          max_attempts=30
          for service in "${services[@]}"; do
            echo "Waiting for $service to become healthy..."
            attempt=1
            success=0
            while [ $attempt -le $max_attempts ]; do
              container_id=$($compose ps -q "$service")
              if [ -n "$container_id" ]; then
                status=$(docker inspect --format='{{if .State.Health}}{{.State.Health.Status}}{{else}}{{.State.Status}}{{end}}' "$container_id")
                if [ "$status" = "healthy" ] || [ "$status" = "running" ]; then
                  echo "Service $service is $status"
                  success=1
                  break
                fi
              fi
              sleep 5
              attempt=$((attempt + 1))
            done
            if [ $success -ne 1 ]; then
              echo "Service $service failed to become healthy"
              $compose logs "$service"
              exit 1
            fi
          done

      - name: Smoke test inference HTTP endpoint
        run: curl --fail http://localhost:9090/docs

      - name: Tear down docker compose stack
        if: always()
        run: docker compose -f infrastructure/docker/docker-compose.yml down -v
